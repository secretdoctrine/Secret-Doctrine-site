:javascript

  function gEBI(id) {
    return document.getElementById(id);
  }

  var searchResultApplier;

  function toggleStyleForFoundSpans() {
    $("iframe").each(function () {
      $(this.contentWindow.document.body).find("span.match").each(function() {
        this.style.backgroundColor = "#FFFF00";
        this.style.color = "#FFFF00";
        this.style.opacity = "0.3";
      });
    });
  }

  function doSearch(searchTerm, targetFrame) {
    // Remove existing highlights
    var range = rangy.createRange();
    range.selectNodeContents(targetFrame.contentWindow.document.body);
    var options = {
      caseSensitive: true,
      wholeWordsOnly: false,
      withinRange: range,
      direction: "forward" // This is redundant because "forward" is the default
    };
    searchResultApplier.undoToRange(range);
    if (searchTerm !== "") {
      // Iterate over matches
      while (range.findText(searchTerm, options)) {
        // range now encompasses the first text match
        searchResultApplier.applyToRange(range);
        // Collapse the range to the position immediately after the match
        range.collapse(false);
      }
    }
  }

  function highlightSearchInFrames() {
    $("iframe").each(function () {
      if(this.attributes.highlight_words && this.attributes.highlight_words.nodeValue.length) {
        var searchregexp = this.attributes.highlight_words.nodeValue.replace(/['!"#$%&\\'()\*+,\-\.\/:;<=>?@\[\\\]\^_`{}~'«»]/g,"");
        searchregexp = searchregexp.replace(/\s{2,}/g," ");
        searchregexp = searchregexp.replace(/\s{1,}\|/g,"|");
        searchregexp = searchregexp.replace(/\|\s{1,}/g,"|");
        var regexp = new RegExp(searchregexp, "gi");
        doSearch(regexp, this);
      }
    });
  }

  function initFind() {
    // Enable buttons
    var classApplierModule = rangy.modules.ClassApplier;
    if (rangy.supported && classApplierModule && classApplierModule.supported) {
      searchResultApplier = rangy.createClassApplier("match");
    }
  }
